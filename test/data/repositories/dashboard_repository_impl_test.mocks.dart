// Mocks generated by Mockito 5.4.2 from annotations
// in rick_morty_universe/test/data/repositories/dashboard_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rick_morty_universe/features/dashboard/domain/entities/characters_response.dart'
    as _i2;

import 'dashboard_repository_impl_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCharactersResponse_0 extends _i1.SmartFake
    implements _i2.CharactersResponse {
  _FakeCharactersResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DashboardRepositoryTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockDashboardRepositoryTest extends _i1.Mock
    implements _i3.DashboardRepositoryTest {
  @override
  _i4.Future<_i2.CharactersResponse> getCharacters() => (super.noSuchMethod(
        Invocation.method(
          #getCharacters,
          [],
        ),
        returnValue:
            _i4.Future<_i2.CharactersResponse>.value(_FakeCharactersResponse_0(
          this,
          Invocation.method(
            #getCharacters,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.CharactersResponse>.value(_FakeCharactersResponse_0(
          this,
          Invocation.method(
            #getCharacters,
            [],
          ),
        )),
      ) as _i4.Future<_i2.CharactersResponse>);
  @override
  _i4.Future<_i2.CharacterItem?> getCharacter(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getCharacter,
          [id],
        ),
        returnValue: _i4.Future<_i2.CharacterItem?>.value(),
        returnValueForMissingStub: _i4.Future<_i2.CharacterItem?>.value(),
      ) as _i4.Future<_i2.CharacterItem?>);
  @override
  _i4.Future<void> saveCharacterInLocal(_i2.CharacterItem? characterItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCharacterInLocal,
          [characterItem],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteCharacterFromLocal(_i2.CharacterItem? characterItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCharacterFromLocal,
          [characterItem],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<List<_i2.CharacterItem>> getAllFavoriteCharacters() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllFavoriteCharacters,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.CharacterItem>>.value(<_i2.CharacterItem>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.CharacterItem>>.value(<_i2.CharacterItem>[]),
      ) as _i4.Future<List<_i2.CharacterItem>>);
}
